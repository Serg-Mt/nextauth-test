// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  client_id                String? // попробуем

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id      Int     @id @default(autoincrement()) //The id of the character.
  name    String? //The name of the character.
  status  String? //The status of the character ('Alive', 'Dead' or 'unknown').
  species String? //The species of the character.
  type    String? //The type or subspecies of the character.
  gender  String? //The gender of the character ('Female', 'Male', 'Genderless' or 'unknown').
  //origin	object	//Name and link to the character's origin location.
  // location	object	//Name and link to the character's last known location endpoint.
  image   String? //Link to the character's image. All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.
  // episode String[] //List of episodes in which this character appeared.
  url     String? //Link to the character's own URL endpoint.
  created String? //Time at which the character was created in the database.
}

model TodoItem {
  id       Int      @id @default(autoincrement())
  order    Int?     @default(0)
  complete Boolean  @default(false)
  label    String
  date     DateTime @default(now())
}
